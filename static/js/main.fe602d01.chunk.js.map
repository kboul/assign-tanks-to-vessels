{"version":3,"sources":["redux-local/actions/types.js","redux-local/reducers/modalReducer.js","constants/vessels.js","utils/assignFlagToVessel.js","utils/oxygenTanksPerFlag.js","redux-local/reducers/tanksReducer.js","redux-local/reducers/index.js","Rout.js","common/ModalComp.js","common/Input.js","common/Select.js","constants/tankLabels.js","components/RegisterTank.js","components/VesselList.js","utils/highlightTableRow.js","redux-local/actions/index.js","components/SelectVessel.js","common/AlertDanger.js","components/TankList.js","utils/displayNumberOfTanks.js","common/FaAngle.js","common/Accordion.js","components/VesselsGrid.js","components/Container.js","components/App.js","serviceWorker.js","index.js","styles/tables.module.css","styles/accordion.module.css"],"names":["TYPES","TOGGLE_MODAL_TO_REGISTER_TANK","REGISTER_TANK","ASSIGN_TANK_TO_VESSEL","TOGGLE_MODAL_TO_ASSIGN_TANK_TO_VESSEL","SELECT_TANK","SELECT_VESSEL","initialState","isModalToRegisterTankVisible","isModalToAssignTankToVesselVisible","modalReducer","state","arguments","length","undefined","type","Object","objectSpread","vesselInfo","name","flag","vessels","toConsumableArray","map","_ref","assignFlagToVessel","vesselName","filter","vesselObj","join","oxygenTanksPerFlag","tanks","cylinderCize","tank","cylinderSize","registeredTanks","selectedTank","selectedVessel","flagConstraint","tankWithSameId","tanksReducer","action","unimedId","concat","index","forEach","findIndex","tankToAssignVessel","vessel","deriveRestOfTanks","greeceMox40","greeceMox10","greeceMox5","greeceMox2","maltaMox40","maltaMox10","maltaMox5","maltaMox2","netherlandsMox40","netherlandsMox10","netherlandsMox5","netherlandsMox2","denmarkMox40","denmarkMox10","denmarkMox5","denmarkMox2","rootReducer","combineReducers","form","formReducer","modal","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","reducer","Root","children","react_default","a","createElement","es","modalHeaderStyle","backgroundColor","ModalComp","toggle","header","Modal","isOpen","size","ModalHeader","style","ModalBody","renderField","input","assign","className","Input","_ref2","label","Field","component","Select","options","opt","key","value","inputLabels","abbreviation","selectLabels","allLabels","allLabelsAbbreviation","_ref3","_ref4","reduxForm","initialValues","cyclinderSerialNumber","origin","owner","handleSubmit","pristine","reset","submitting","onSubmit","common_Input","common_Select","disabled","onClick","VesselList","currentRowIndex","handleChangeId","_this","setState","_this2","this","selectVessel","props","tables","rowIndex","currentIndex","cursor","color","Component","connect","AlertDanger","constraint","toggleModalToAssignTankToVessel","selectTank","assignTankToVessel","_ref$tanks","react","scope","common_AlertDanger","common_ModalComp","components_SelectVessel","values","arrowStyle","fontSize","FaAngle","isAccordionCollapsed","aria-hidden","Accordion","collapse","_this$props","Card","card","CardHeader","cardHeader","common_FaAngle","Collapse","CardBody","tableHeadStyle","selectLabel","common_Accordion","registerTank","toggleModalToRegisterTank","components_RegisterTank","components_TankList","components_VesselList","components_VesselsGrid","App","components_Container","Boolean","location","hostname","match","ReactDOM","render","Rout","components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.fe602d01.chunk.js","sourcesContent":["export const TYPES = {\n    TOGGLE_MODAL_TO_REGISTER_TANK: 'TOGGLE_MODAL_TO_REGISTER_TANK',\n    REGISTER_TANK: 'REGISTER_TANK',\n    ASSIGN_TANK_TO_VESSEL: 'ASSIGN_TANK_TO_VESSEL',\n    TOGGLE_MODAL_TO_ASSIGN_TANK_TO_VESSEL: 'TOGGLE_MODAL_TO_ASSIGN_TANK_TO_VESSEL',\n    SELECT_TANK: 'SELECT_TANK',\n    SELECT_VESSEL: 'SELECT_VESSEL'\n}","import { TYPES } from '../actions/types'\n\nconst initialState = {\n    isModalToRegisterTankVisible: false,\n    isModalToAssignTankToVesselVisible: false\n}\n\nfunction modalReducer(state = initialState, action) {\n    switch (action.type) {\n        case TYPES.TOGGLE_MODAL_TO_REGISTER_TANK:\n            return {\n                ...state,\n                isModalToRegisterTankVisible: !state.isModalToRegisterTankVisible\n            }\n        case TYPES.TOGGLE_MODAL_TO_ASSIGN_TANK_TO_VESSEL:\n            return {\n                ...state,\n                isModalToAssignTankToVesselVisible: !state.isModalToAssignTankToVesselVisible\n            }\n        default:\n            return state\n    }\n}\n\nexport default modalReducer","export const vesselInfo = [\n    { name: 'Astoria', flag: 'Greece' },\n    { name: 'Lady Gloria', flag: 'Malta' },\n    { name: '17th October', flag: 'Netherlands' },\n    { name: 'Jela Delta', flag: 'Greece' },\n    { name: 'Claudia', flag: 'Malta' },\n    { name: 'Janna', flag: 'Denmark' }\n]\n\nexport const vessels = [...vesselInfo.map(({ name }) => name)]","/**\n * \n * @param {*} vesselName string\n */\n\nimport { vesselInfo } from '../constants/vessels'\n\nexport const assignFlagToVessel = vesselName => {\n    return (vesselInfo\n        .filter(vesselObj => vesselName === vesselObj.name)\n        .map(vesselObj => vesselObj.flag)).join('')\n}","/**\n * find which tanks have equal vessel flag\n * \n * @param {*} tanks <Tanks>\n * @param {*} flag string\n * @param {*} cylinderCize string\n */\n\nexport const oxygenTanksPerFlag = (tanks, flag, cylinderCize) => {\n    return tanks.filter(tank => tank.flag === flag\n        && tank.cylinderSize === cylinderCize).length\n}","import { TYPES } from '../actions/types'\nimport { assignFlagToVessel } from '../../utils/assignFlagToVessel'\nimport { oxygenTanksPerFlag } from '../../utils/oxygenTanksPerFlag'\n\nconst initialState = {\n    registeredTanks: [],\n    selectedTank: {},\n    selectedVessel: '',\n    flagConstraint: false,\n    tankWithSameId: false\n}\n\nfunction tanksReducer(state = initialState, action) {\n    switch (action.type) {\n        case TYPES.REGISTER_TANK:\n            // revert tankWithSameId alert\n            state.tankWithSameId = false\n            // revert constraint alert\n            state.flagConstraint = false\n\n            // if a tank has same unimedId with an existing one \n            // don't store it and return current registeredTanks state\n            const tankHasSameIdWithExisting = state.registeredTanks\n                .filter(tank => tank.unimedId === action.tank.unimedId)\n\n            if (tankHasSameIdWithExisting.length > 0) {\n                // display tankWithSameId alert \n                state.tankWithSameId = true\n                return {\n                    ...state,\n                    registeredTanks: [\n                        ...state.registeredTanks\n                    ]\n                }\n            }\n\n            // otherwise return the previous state plus the\n            // registered new tank\n            return {\n                ...state,\n                registeredTanks: [\n                    ...state.registeredTanks,\n                    { ...action.tank }\n                ]\n            }\n        case TYPES.SELECT_TANK:\n            return {\n                ...state,\n                selectedTank: {\n                    ...action.tank\n                }\n            }\n        case TYPES.ASSIGN_TANK_TO_VESSEL:\n            // store tanks to a shorter variable\n            const tanks = state.registeredTanks\n\n            // revert constraint alert\n            state.flagConstraint = false\n            // revert tankWithSameId alert\n            state.tankWithSameId = false\n\n            // find the array index which contains the tank to assign vessel\n            let index\n            tanks.forEach(tank => {\n                if (tank.unimedId === state.selectedTank.unimedId) {\n                    index = tanks\n                        .findIndex(tank => tank.unimedId === state.selectedTank.unimedId)\n                }\n            })\n\n            // update the specific tank object instance\n            // by spreading it in the array & injecting \n            // the vessel name\n            const tankToAssignVessel = tanks[index] = {\n                ...tanks[index],\n                vessel: action.vesselName,\n                flag: assignFlagToVessel(action.vesselName)\n            }\n\n            // collect all remaining tank objects apart \n            // from the one that was previously modified\n            const deriveRestOfTanks = tanks\n                .filter(tank => tank.unimedId !== tanks[index].unimedId)\n\n            // apply cylinder type constraints per vessel flag \n            const greeceMox40 = oxygenTanksPerFlag(tanks, 'Greece', 'MOX-40')\n            const greeceMox10 = oxygenTanksPerFlag(tanks, 'Greece', 'MOX-10')\n            const greeceMox5 = oxygenTanksPerFlag(tanks, 'Greece', 'MOX-5')\n            const greeceMox2 = oxygenTanksPerFlag(tanks, 'Greece', 'MOX-2')\n\n            const maltaMox40 = oxygenTanksPerFlag(tanks, 'Malta', 'MOX-40')\n            const maltaMox10 = oxygenTanksPerFlag(tanks, 'Malta', 'MOX-10')\n            const maltaMox5 = oxygenTanksPerFlag(tanks, 'Malta', 'MOX-5')\n            const maltaMox2 = oxygenTanksPerFlag(tanks, 'Malta', 'MOX-2')\n\n            const netherlandsMox40 = oxygenTanksPerFlag(tanks, 'Netherlands', 'MOX-40')\n            const netherlandsMox10 = oxygenTanksPerFlag(tanks, 'Netherlands', 'MOX-10')\n            const netherlandsMox5 = oxygenTanksPerFlag(tanks, 'Netherlands', 'MOX-5')\n            const netherlandsMox2 = oxygenTanksPerFlag(tanks, 'Netherlands', 'MOX-2')\n\n            const denmarkMox40 = oxygenTanksPerFlag(tanks, 'Denmark', 'MOX-40')\n            const denmarkMox10 = oxygenTanksPerFlag(tanks, 'Denmark', 'MOX-10')\n            const denmarkMox5 = oxygenTanksPerFlag(tanks, 'Denmark', 'MOX-5')\n            const denmarkMox2 = oxygenTanksPerFlag(tanks, 'Denmark', 'MOX-2')\n\n            if (greeceMox40 > 2 || greeceMox10 > 4 || greeceMox5 > 2 || greeceMox2 > 2\n                || maltaMox40 > 1 || maltaMox10 > 2 || maltaMox5 > 0 || maltaMox2 > 6\n                || netherlandsMox40 > 2 || netherlandsMox10 > 2 || netherlandsMox5 > 1 || netherlandsMox2 > 3\n                || denmarkMox40 > 3 || denmarkMox10 > 4 || denmarkMox5 > 2 || denmarkMox2 > 1) {\n                // display constraint alert\n                state.flagConstraint = true\n                return {\n                    ...state,\n                    registeredTanks: [\n                        ...deriveRestOfTanks,\n                        tanks[index] = {\n                            ...tanks[index],\n                            vessel: ''\n                        }\n                    ]\n                }\n            }\n\n            return {\n                ...state,\n                registeredTanks: [\n                    tankToAssignVessel,\n                    ...deriveRestOfTanks\n                ]\n            }\n        case TYPES.SELECT_VESSEL:\n            return {\n                ...state,\n                selectedVessel: action.vessel\n            }\n        default:\n            return state\n    }\n}\n\nexport default tanksReducer","import { combineReducers } from 'redux'\nimport { reducer as formReducer } from 'redux-form'\nimport modalReducer from './modalReducer'\nimport tanksReducer from './tanksReducer'\n\nconst rootReducer = combineReducers({\n    form: formReducer,\n    modal: modalReducer,\n    tanks: tanksReducer\n})\n\nexport default rootReducer","import React from 'react'\nimport { Provider } from 'react-redux'\nimport PropTypes from 'prop-types'\n\nimport { createStore, compose } from 'redux'\nimport reducer from './redux-local/reducers'\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__\n    || compose\n\nconst store = createStore(reducer, composeEnhancers())\n\nconst Root = ({ children }) => {\n    return (\n        <Provider store={store}>\n            {children}\n        </Provider>\n    )\n}\n\nRoot.propTypes = {\n    children: PropTypes.element.isRequired\n}\n\nexport default Root","import React from 'react'\nimport { Modal, ModalHeader, ModalBody } from 'reactstrap'\nimport PropTypes from 'prop-types'\n\nconst modalHeaderStyle = { backgroundColor: 'lightgrey' }\n\nconst ModalComp = ({ modal, toggle, header, children }) => {\n    return (\n        <Modal\n            isOpen={modal}\n            toggle={toggle}\n            size=\"lg\">\n            <ModalHeader\n                style={modalHeaderStyle}\n                toggle={toggle}>\n                {header}\n            </ModalHeader>\n            <ModalBody>\n                {children}\n            </ModalBody>\n        </Modal>\n    )\n}\n\nModalComp.propTypes = {\n    header: PropTypes.string,\n    modal: PropTypes.bool.isRequired,\n    toggle: PropTypes.func.isRequired,\n    children: PropTypes.element.isRequired\n}\n\nexport default ModalComp","import React from 'react'\nimport { Field } from \"redux-form\"\nimport PropTypes from 'prop-types'\n\nconst renderField = ({ input }) => {\n    return (\n        <input\n            className='form-control'\n            {...input}\n            type='text' />\n    )\n}\n\nconst Input = ({ name, label }) => {\n    return (\n        <div>\n            <label><b>{label}</b></label>\n            <div className=\"form-group\">\n                <Field\n                    name={name}\n                    component={renderField}\n                    type=\"text\"\n                />\n            </div>\n        </div>\n    )\n}\n\nInput.propTypes = {\n    name: PropTypes.string.isRequired,\n    label: PropTypes.string.isRequired\n}\n\nexport default Input","import React from 'react'\nimport { Field } from \"redux-form\"\nimport PropTypes from 'prop-types'\n\nconst Select = ({ name, label, options }) => {\n    return (\n        <div className=\"form-group\">\n            <label><b>{label}</b></label>\n            <div className=\"form-group\">\n                <div>\n                    <Field\n                        className=\"form-control\"\n                        name={name}\n                        component=\"select\">\n                        {options.map((opt, key) => {\n                            return (\n                                <option\n                                    key={key}\n                                    value={opt}>\n                                    {opt}\n                                </option>\n                            )\n                        })}\n                    </Field>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nSelect.propTypes = {\n    name: PropTypes.string.isRequired,\n    label: PropTypes.string.isRequired,\n    options: PropTypes.arrayOf(PropTypes.string).isRequired\n}\n\nexport default Select","export const inputLabels = [\n    {\n        name: 'unimedId',\n        label: 'Unimed Id',\n        abbreviation: 'UMM ID'\n    },\n    {\n        name: 'cyclinderSerialNumber',\n        label: 'Cylinder Serial Number',\n        abbreviation: 'Serial Number'\n    }\n]\n\nexport const selectLabels = [\n    {\n        name: 'cylinderSize',\n        label: 'Cylinder Size',\n        options: [\n            'MOX-40',\n            'MOX-10',\n            'MOX-5',\n            'MOX-2'\n        ],\n        abbreviation: 'Cylinder Size'\n    },\n    {\n        name: 'origin',\n        label: 'Origin',\n        options: [\n            'US',\n            'EU',\n            'OTHER'\n        ],\n        abbreviation: 'Origin'\n    },\n    {\n        name: 'owner',\n        label: 'Owner',\n        options: [\n            'UNIMED',\n            'OTHER'\n        ],\n        abbreviation: 'Owner'\n    }\n]\n\nexport const allLabels = [\n    ...inputLabels.map(({ label }) => label),\n    ...selectLabels.map(({ label }) => label)\n]\n\nexport const allLabelsAbbreviation = [\n    ...inputLabels.map(({ abbreviation }) => abbreviation),\n    ...selectLabels.map(({ abbreviation }) => abbreviation)\n]","import React from 'react'\nimport { reduxForm } from \"redux-form\"\nimport PropTypes from 'prop-types'\nimport Input from '../common/Input'\nimport Select from '../common/Select'\nimport { inputLabels, selectLabels }\n    from '../constants/tankLabels'\n\nconst RegisterTank = ({ handleSubmit, pristine, reset, submitting }) => {\n    return (\n        <form onSubmit={handleSubmit}>\n            {inputLabels.map(({ name, label }, key) => {\n                return (\n                    <div key={key}>\n                        <Input label={label} name={name} />\n                    </div>\n                )\n            })}\n\n            {selectLabels.map(({ label, name, options }, key) => {\n                return (\n                    <div key={key}>\n                        <Select\n                            label={label}\n                            name={name}\n                            options={options} />\n                    </div>\n                )\n            })}\n\n            <button\n                className=\"btn btn-primary btn float-right\"\n                type=\"submit\"\n                disabled={pristine || submitting}>\n                Save\n            </button>\n\n            <button\n                className=\"btn btn-primary btn float-right mr-4\"\n                type=\"button\"\n                disabled={pristine || submitting}\n                onClick={reset}>\n                Cancel\n            </button>\n        </form>\n    )\n}\n\nRegisterTank.propTypes = {\n    pristine: PropTypes.bool.isRequired,\n    submitting: PropTypes.bool.isRequired,\n    handleSubmit: PropTypes.func.isRequired,\n    reset: PropTypes.func.isRequired\n}\n\nexport default reduxForm({\n    form: \"registerTank\",\n    initialValues: {\n        unimedId: '',\n        cyclinderSerialNumber: '',\n        cylinderSize: 'MOX-40',\n        origin: 'US',\n        owner: 'UNIMED'\n    }\n})(RegisterTank)","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport PropTypes from 'prop-types'\nimport { vesselInfo } from '../constants/vessels'\nimport { selectVessel } from '../redux-local/actions'\nimport { hightlightTableRow } from '../utils/highlightTableRow'\nimport { tables } from '../styles/tables.module.css'\n\nclass VesselList extends Component {\n    state = {\n        currentRowIndex: ''\n    }\n\n    handleChangeId = currentRowIndex => {\n        this.setState({ currentRowIndex })\n    }\n\n    render() {\n        const { currentRowIndex } = this.state\n        const { selectVessel } = this.props\n        return (\n            <div className=\"mt-4 mb-4\">\n                <h4 >Vessel List</h4>\n                <table className={`table mt-2 ${tables}`}>\n                    <thead>\n                        <tr>\n                            <th>Name</th>\n                            <th>Flag</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {vesselInfo.map(({ name, flag }, index) => {\n                            return (\n                                <tr\n                                    style={hightlightTableRow(index, currentRowIndex)}\n                                    key={index}\n                                    onClick={() => {\n                                        this.handleChangeId(index)\n                                        selectVessel(name)\n                                    }}>\n                                    <td>{name}</td>\n                                    <td>{flag}</td>\n                                </tr>\n                            )\n                        })}\n                    </tbody>\n                </table>\n                <p className=\"text-center\">\n                    Select a Vessel from table above to\n                    display oxygen tanks per ship.\n                </p>\n            </div>\n        )\n    }\n}\n\nVesselList.propTypes = {\n    selectVessel: PropTypes.func.isRequired\n}\n\nexport default connect(null, {\n    selectVessel\n})(VesselList)","/**\n * \n * @param {*} rowIndex number\n * @param {*} currentIndex number\n */\n\nexport const hightlightTableRow = (rowIndex, currentIndex) => {\n    return {\n        cursor: 'pointer',\n        backgroundColor: rowIndex === currentIndex ? '#2196F3' : '',\n        color: rowIndex === currentIndex ? '#ffffff' : ''\n    }\n}","import { TYPES } from './types'\n\nexport const toggleModalToRegisterTank = () => ({\n    type: TYPES.TOGGLE_MODAL_TO_REGISTER_TANK\n})\n\nexport const registerTank = tank => ({\n    type: TYPES.REGISTER_TANK,\n    tank\n})\n\nexport const assignTankToVessel = vesselName => ({\n    type: TYPES.ASSIGN_TANK_TO_VESSEL,\n    vesselName\n})\n\nexport const toggleModalToAssignTankToVessel = () => ({\n    type: TYPES.TOGGLE_MODAL_TO_ASSIGN_TANK_TO_VESSEL\n})\n\nexport const selectTank = tank => ({\n    type: TYPES.SELECT_TANK,\n    tank\n})\n\nexport const selectVessel = vessel => ({\n    type: TYPES.SELECT_VESSEL,\n    vessel\n})","import React from 'react'\nimport { reduxForm } from \"redux-form\"\nimport PropTypes from 'prop-types'\nimport Select from '../common/Select'\nimport { vessels } from '../constants/vessels'\n\nconst SelectVessel = ({ handleSubmit, submitting }) => {\n    return (\n        <form onSubmit={handleSubmit}>\n            <Select\n                label={'Select Vessel'}\n                name={'selectVessel'}\n                options={vessels} />\n\n            <button\n                className=\"btn btn-primary btn float-right\"\n                type=\"submit\"\n                disabled={submitting}>\n                Save\n            </button>\n        </form>\n    )\n}\n\nSelectVessel.propTypes = {\n    submitting: PropTypes.bool.isRequired,\n    handleSubmit: PropTypes.func.isRequired\n}\n\nexport default reduxForm({\n    form: \"selectVessel\",\n    initialValues: {\n        selectVessel: 'Astoria'\n    }\n})(SelectVessel)","import React from 'react'\nimport PropTypes from 'prop-types'\n\nconst AlertDanger = ({ constraint, children }) => {\n    if (!constraint) return null\n\n    return (\n        <div className=\"alert alert-danger m-2\">\n            {children}\n        </div>\n    )\n}\n\nAlertDanger.propTypes = {\n    constraint: PropTypes.bool.isRequired,\n    children: PropTypes.string.isRequired\n}\n\nexport default AlertDanger","import React, { Fragment } from 'react'\nimport { connect } from 'react-redux'\nimport PropTypes from 'prop-types'\nimport ModalComp from '../common/ModalComp'\nimport SelectVessel from './SelectVessel'\nimport AlertDanger from '../common/AlertDanger'\nimport {\n    toggleModalToAssignTankToVessel,\n    selectTank,\n    assignTankToVessel\n} from '../redux-local/actions'\nimport { allLabels } from '../constants/tankLabels'\nimport { displayNumberOfTanks } from '../utils/displayNumberOfTanks'\nimport { tables } from '../styles/tables.module.css'\n\nconst TankList = ({ tanks: { registeredTanks,\n    flagConstraint, tankWithSameId },\n    modal: { isModalToAssignTankToVesselVisible },\n    toggleModalToAssignTankToVessel, selectTank,\n    assignTankToVessel, vessel }) => {\n\n    if (registeredTanks.length === 0)\n        return (\n            <p className=\"mt-2\">\n                No registered tanks.\n            </p>\n        )\n\n    return (\n        <Fragment>\n            <h4 className=\"mt-4\">\n                Pool of Registered Oxygen Tanks\n            </h4>\n            <table className={`table mt-2 ${tables}`}>\n                <thead>\n                    <tr>\n                        {allLabels.map((label, index) => {\n                            return (\n                                <th\n                                    key={index}\n                                    scope=\"col\">\n                                    {label}\n                                </th>\n                            )\n                        })}\n                        <th>Assign Tank To Vessel</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {registeredTanks.map(tank => {\n                        return (\n                            <Fragment key={tank.unimedId}>\n                                <tr>\n                                    <td>{tank.unimedId}</td>\n                                    <td>{tank.cyclinderSerialNumber}</td>\n                                    <td>{tank.cylinderSize}</td>\n                                    <td>{tank.origin}</td>\n                                    <td>{tank.owner}</td>\n                                    <td>\n                                        <button\n                                            className=\"btn btn-sm btn-primary\"\n                                            onClick={() => {\n                                                selectTank(tank)\n                                                toggleModalToAssignTankToVessel()\n                                            }}>\n                                            Assign\n                                        </button>\n                                    </td>\n                                </tr>\n                            </Fragment>\n                        )\n                    })}\n                </tbody>\n            </table>\n\n            <div className=\"m-2\">\n                {displayNumberOfTanks(registeredTanks)}\n            </div>\n\n            <AlertDanger constraint={tankWithSameId}>\n                There is already a tank with this Id\n            </AlertDanger>\n\n            <AlertDanger constraint={flagConstraint}>\n                The selected vessel can not receive more tanks of this type\n            </AlertDanger>\n\n            <ModalComp\n                header={'Assign Tank To Vessel'}\n                modal={isModalToAssignTankToVesselVisible}\n                toggle={() => toggleModalToAssignTankToVessel()}>\n                <SelectVessel onSubmit={() => {\n                    assignTankToVessel(vessel.values.selectVessel)\n                    toggleModalToAssignTankToVessel()\n                }} />\n            </ModalComp>\n        </Fragment>\n    )\n}\n\nTankList.propTypes = {\n    tanks: PropTypes.object.isRequired,\n    modal: PropTypes.objectOf(Boolean).isRequired,\n    cylinderSize: PropTypes.object,\n    assignTankToVessel: PropTypes.func.isRequired\n}\n\nconst mapStateToProps = state => ({\n    tanks: state.tanks,\n    modal: state.modal,\n    vessel: state.form.selectVessel\n})\n\nexport default connect(mapStateToProps, {\n    toggleModalToAssignTankToVessel,\n    selectTank,\n    assignTankToVessel\n})(TankList)","/**\n * \n * @param {*} tanks <Tanks>\n */\n\nexport const displayNumberOfTanks = tanks => {\n    if (tanks.length === 1)\n        return 'There is 1 registered tank.'\n    return `There are ${tanks.length} registered tanks.`\n}","import React from 'react'\nimport PropTypes from 'prop-types'\n\nconst arrowStyle = { fontSize: '24px' }\n\nconst FaAngle = ({ isAccordionCollapsed }) => {\n    return (\n        <i className={`fa fa-angle-${!isAccordionCollapsed ? 'up' : 'down'}`}\n            aria-hidden=\"true\"\n            style={arrowStyle}>\n        </i>\n    )\n}\n\nFaAngle.propTypes = {\n    isAccordionCollapsed: PropTypes.bool.isRequired\n}\n\nexport default FaAngle","import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport { Collapse, CardBody, Card, CardHeader } from 'reactstrap'\nimport FaAngle from './FaAngle'\nimport {card, cardHeader} from '../styles/accordion.module.css'\n\nclass Accordion extends Component {\n    state = {\n        collapse: true\n    }\n\n    toggle = () => {\n        this.setState({ collapse: !this.state.collapse })\n    }\n\n    render() {\n        const { header, children } = this.props\n        const { collapse } = this.state\n        return (\n            <div className=\"row no-gutters\">\n                <div className=\"col\">\n                    <Card className={card}>\n                        <CardHeader\n                            className={cardHeader}\n                            onClick={this.toggle}>\n                            <FaAngle isAccordionCollapsed={collapse} />\n                            &nbsp; {header}\n                        </CardHeader>\n                        <Collapse isOpen={collapse}>\n                            <CardBody>\n                                {children}\n                            </CardBody>\n                        </Collapse>\n                    </Card>\n                </div>\n            </div>\n        )\n    }\n}\n\nAccordion.propTypes = {\n    isAccordionCollapsed: PropTypes.bool,\n    header: PropTypes.string,\n    children: PropTypes.object.isRequired\n}\n\nexport default Accordion","import React from 'react'\nimport { connect } from 'react-redux'\nimport PropTypes from 'prop-types'\nimport Accordion from '../common/Accordion'\nimport {\n    selectLabels, allLabelsAbbreviation\n} from '../constants/tankLabels'\n\nconst tableHeadStyle = { fontSize: '16px' }\n\nconst VesselsGrid = ({ tanks: { registeredTanks, selectedVessel } }) => {\n    if (registeredTanks.length === 0) return null\n\n    return (\n        <div className=\"mt-4\">\n            <h4>Vessels Grid</h4>\n            {selectLabels[0].options.map((selectLabel, key) => {\n                return (\n                    <Accordion key={key} header={selectLabel}>\n                        <table className=\"table\">\n                            <thead style={tableHeadStyle}>\n                                <tr>\n                                    {allLabelsAbbreviation.map((label, key) => {\n                                        return (\n                                            <th\n                                                key={key}\n                                                scope=\"col\">\n                                                {label}\n                                            </th>\n                                        )\n                                    })}\n                                </tr>\n                            </thead>\n                            <tbody>\n                                {registeredTanks\n                                    .filter(tank => tank.cylinderSize === selectLabel\n                                        && tank.vessel === selectedVessel)\n                                    .map((tank, key) => {\n                                        return (\n                                            <tr key={key}>\n                                                <td>{tank.unimedId}</td>\n                                                <td>{tank.cyclinderSerialNumber}</td>\n                                                <td>{tank.cylinderSize}</td>\n                                                <td>{tank.origin}</td>\n                                                <td>{tank.owner}</td>\n                                            </tr>\n                                        )\n                                    })}\n                            </tbody>\n                        </table>\n                    </Accordion>\n                )\n            })}\n        </div>\n    )\n}\n\nVesselsGrid.propTypes = {\n    tanks: PropTypes.object.isRequired\n}\n\nconst mapStateToProps = state => ({\n    tanks: state.tanks\n})\n\nexport default connect(mapStateToProps)(VesselsGrid)","import React from 'react'\nimport { connect } from 'react-redux'\nimport PropTypes from 'prop-types'\nimport ModalComp from '../common/ModalComp'\nimport RegisterTank from './RegisterTank'\nimport VesselList from './VesselList'\nimport TankList from './TankList'\nimport VesselsGrid from './VesselsGrid'\nimport { toggleModalToRegisterTank } from '../redux-local/actions'\nimport { registerTank } from '../redux-local/actions'\n\nconst Container = ({ modal: { isModalToRegisterTankVisible },\n    toggleModalToRegisterTank, registerTank, tank }) => {\n\n    return (\n        <div className=\"row\">\n            <div className=\"col-md-6\">\n                <button\n                    className=\"btn btn-primary\"\n                    onClick={() => toggleModalToRegisterTank()}>\n                    Register Tank\n                </button>\n\n                <ModalComp\n                    header={'Add New Tank'}\n                    modal={isModalToRegisterTankVisible}\n                    toggle={() => toggleModalToRegisterTank()}>\n                    <RegisterTank onSubmit={() => {\n                        toggleModalToRegisterTank()\n                        registerTank(tank.values)\n                    }} />\n                </ModalComp>\n\n                <TankList />\n\n                <VesselList />\n            </div>\n            <div className=\"col-md-6\">\n                <VesselsGrid />\n            </div>\n        </div>\n    )\n}\n\nContainer.propTypes = {\n    modal: PropTypes.objectOf(Boolean).isRequired,\n    tank: PropTypes.object,\n    toggleModalToRegisterTank: PropTypes.func.isRequired,\n    registerTank: PropTypes.func.isRequired\n}\n\nconst mapStateToProps = state => ({\n    modal: state.modal,\n    tank: state.form.registerTank\n})\n\nexport default connect(mapStateToProps, {\n    toggleModalToRegisterTank,\n    registerTank\n})(Container)","import React from 'react'\nimport Container from './Container'\n\nconst App = () => {\n    return (\n        <div className=\"container mt-2\">\n            <Container />\n        </div>\n    )\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nexport function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets see https://github.com/facebook/create-react-app/issues/2374\n            return\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config)\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                        'worker. To learn more, visit https://bit.ly/CRA-PWA'\n                    )\n                })\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config)\n            }\n        })\n    }\n}\n\nfunction registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing\n                if (installingWorker == null) {\n                    return\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                            )\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration)\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.')\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration)\n                            }\n                        }\n                    }\n                }\n            }\n        })\n        .catch(error => {\n            console.error('Error during service worker registration:', error)\n        })\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl)\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type')\n            if (\n                response.status === 404 ||\n                (contentType != null && contentType.indexOf('javascript') === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload()\n                    })\n                })\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config)\n            }\n        })\n        .catch(() => {\n            console.log(\n                'No internet connection found. App is running in offline mode.'\n            )\n        })\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready.then(registration => {\n            registration.unregister()\n        })\n    }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\n\nimport 'bootstrap/dist/css/bootstrap.css'\nimport 'font-awesome/css/font-awesome.min.css'\nimport './index.css'\n\nimport Root from './Rout'\nimport App from './components/App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(\n    <Root>\n        <App />\n    </Root>,\n    document.getElementById('root')\n)\n\nserviceWorker.unregister()","// extracted by mini-css-extract-plugin\nmodule.exports = {\"tables\":\"tables_tables__2I0An\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"card\":\"accordion_card__2p65y\",\"cardHeader\":\"accordion_cardHeader__3qufT\"};"],"sourceRoot":""}